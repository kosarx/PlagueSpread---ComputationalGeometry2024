{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to vvrpywork","text":""},{"location":"index.html#project-overview","title":"Project Overview","text":"<p>Please keep in mind that the package (and, by extension, this documentation) is still a Work-in-Progress.</p>"},{"location":"index.html#vvrpywork","title":"<code>vvrpywork</code>","text":"<p>API reference documentation for the <code>vvrpywork</code> package.</p>"},{"location":"constants.html","title":"Constants","text":""},{"location":"constants.html#vvrpywork.constants","title":"<code>vvrpywork.constants</code>","text":""},{"location":"scene.html","title":"Scene","text":""},{"location":"scene.html#vvrpywork.scene","title":"<code>vvrpywork.scene</code>","text":"<p>Implements objects to represent 2D and 3D scenes containing shapes.</p>"},{"location":"scene.html#vvrpywork.scene.Scene2D","title":"<code>Scene2D(width=None, height=None, caption=None, resizable=False)</code>","text":"<p>A class representing a 2D Scene.</p>"},{"location":"scene.html#vvrpywork.scene.Scene2D.__on_draw","title":"<code>__on_draw()</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.__on_mouse_press","title":"<code>__on_mouse_press(x, y, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_press","title":"<code>on_mouse_press(x, y, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.__on_mouse_drag","title":"<code>__on_mouse_drag(x, y, dx, dy, buttons, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_drag","title":"<code>on_mouse_drag(x, y, dx, dy, buttons, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.__on_mouse_release","title":"<code>__on_mouse_release(x, y, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.on_mouse_release","title":"<code>on_mouse_release(x, y, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.__on_key_press","title":"<code>__on_key_press(symbol, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.on_key_press","title":"<code>on_key_press(symbol, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.mainLoop","title":"<code>mainLoop(max_fps=60)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.addShape","title":"<code>addShape(shape, name=None)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.updateShape","title":"<code>updateShape(name)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene2D.removeShape","title":"<code>removeShape(name)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D","title":"<code>Scene3D(width, height, caption, output=False, n_sliders=0)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.window","title":"<code>window = gui.Application.instance.create_window(caption, width, height)</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.scene_widget","title":"<code>scene_widget = gui.SceneWidget()</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.sio","title":"<code>sio = StringIO()</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.text_output","title":"<code>text_output = gui.Label('')</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.modifiers","title":"<code>modifiers = gui.KeyModifier.NONE.value</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.last_coords","title":"<code>last_coords = np.array((0.0, 0.0))</code>  <code>instance-attribute</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.mainLoop","title":"<code>mainLoop()</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_key_press","title":"<code>on_key_press(symbol, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_key_release","title":"<code>on_key_release(symbol, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_slider_change","title":"<code>on_slider_change(slider_id, value)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_idle","title":"<code>on_idle()</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.keyEventToFunction","title":"<code>keyEventToFunction(keyEvent)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.mouseEventToFunction","title":"<code>mouseEventToFunction(mouseEvent)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_press","title":"<code>on_mouse_press(x, y, z, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_drag","title":"<code>on_mouse_drag(x, y, z, dx, dy, dz, buttons, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.on_mouse_release","title":"<code>on_mouse_release(x, y, z, button, modifiers)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.addShape","title":"<code>addShape(shape, name=None, quick=False)</code>","text":"<p>If this method is called in rapid succession e.g., inside Scene3d.on_idle, set quick=True, which prevents some crashes.</p>"},{"location":"scene.html#vvrpywork.scene.Scene3D.updateShape","title":"<code>updateShape(name, quick=False)</code>","text":"<p>If this method is called in rapid succession e.g., inside Scene3d.on_idle, set quick=True, which prevents some crashes.</p>"},{"location":"scene.html#vvrpywork.scene.Scene3D.removeShape","title":"<code>removeShape(name)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.print","title":"<code>print(*args, **kwargs)</code>","text":""},{"location":"scene.html#vvrpywork.scene.Scene3D.set_slider_value","title":"<code>set_slider_value(slider_id, value, no_callback=False)</code>","text":"<p>Programmatically sets the value of slider indexed <code>slider_id</code> as <code>value</code>. If <code>no_callback=True</code> the respective callback function will not be triggered after the slider is set.</p>"},{"location":"scene.html#vvrpywork.scene.get_rotation_matrix","title":"<code>get_rotation_matrix(angle, axis)</code>","text":""},{"location":"scene.html#vvrpywork.scene.world_space","title":"<code>world_space(func)</code>","text":""},{"location":"shapes.html","title":"Shapes","text":""},{"location":"shapes.html#vvrpywork.shapes","title":"<code>vvrpywork.shapes</code>","text":"<p>Implements objects to represent common 2D and 3D shapes.</p>"},{"location":"shapes.html#vvrpywork.shapes.Shape","title":"<code>Shape</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract Base Class to represent shapes.</p>"},{"location":"shapes.html#vvrpywork.shapes.ShapeSet","title":"<code>ShapeSet</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract Base Class to represent shape sets.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D","title":"<code>Point2D(p, size=1.0, resolution=None, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a point in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the point.</p> required <code>size</code> <code>Number</code> <p>The size of the displayed point.</p> <code>1.0</code> <code>resolution</code> <code>None | int</code> <p>The resolution of the displayed point. If <code>None</code>, it will be calculated automatically.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed point (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the x-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the y-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's size.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.resolution","title":"<code>resolution: None | int</code>  <code>property</code>","text":"<p>The point's resolution.</p> <p>The point is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The point's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.distanceSq","title":"<code>distanceSq(p)</code>","text":"<p>Calculates the squared distance from a second point.</p> <p>Calculates the squared Euclidean distance between this and another point. It doesn't take the square root of the result and is, therefore, faster than calling <code>distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D</code> <p>The second point, the squared distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>Number</code> <p>The squared distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point2D.distance","title":"<code>distance(p)</code>","text":"<p>Calculates the distance from a second point.</p> <p>Calculates the Euclidean distance between this and another point. If you do not need the exact distance, you may want to look into using <code>distanceSq</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D</code> <p>The second point, the distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D","title":"<code>Line2D(p1, p2, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a line segment in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the first endpoint.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the second endpoint.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed line segment.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed line segment (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's width.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.getPointFrom","title":"<code>getPointFrom()</code>","text":"<p>Returns the line segment's first endpoint.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The line segment's first endpoint as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.getPointTo","title":"<code>getPointTo()</code>","text":"<p>Returns the line segment's second endpoint.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The line segment's second endpoint as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.length","title":"<code>length()</code>","text":"<p>Calculates the length of the line segment.</p> <p>Returns:</p> Type Description <code>float</code> <p>The length of the line segment.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line2D.isOnRight","title":"<code>isOnRight(point)</code>","text":"<p>Determines whether a point is to the right of the line.</p> <p>Determines whether a point is to the right of the line defined by this line segment.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's on the right).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is on the right, <code>False</code> otherwise (incl. if it's on the line itself).</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D","title":"<code>Triangle2D(p1, p2, p3, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a triangle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the first vertex.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the second vertex.</p> required <code>p3</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the third vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed triangle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed triangle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the triangle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.x3","title":"<code>x3: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the third vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.y3","title":"<code>y3: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the third vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The triangle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The triangle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the triangle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.getPoint1","title":"<code>getPoint1()</code>","text":"<p>Returns the triangle's first vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's first vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.getPoint2","title":"<code>getPoint2()</code>","text":"<p>Returns the triangle's second vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's second vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.getPoint3","title":"<code>getPoint3()</code>","text":"<p>Returns the triangle's third vertex.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The triangle's third vertex as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.getCircumCircle","title":"<code>getCircumCircle()</code>","text":"<p>Returns the triangle's circumcircle.</p> <p>Returns:</p> Type Description <code>Circle2D</code> <p>The triangle's circumcircle as a <code>Circle2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Triangle2D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the triangle.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's inside the triangle).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the triangle (incl. the edges), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D","title":"<code>Circle2D(p, radius, resolution=None, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a circle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the center.</p> required <code>radius</code> <code>Number</code> <p>The circle's radius.</p> required <code>resolution</code> <code>None | int</code> <p>The resolution of the displayed circle. If <code>None</code>, it will be calculated automatically.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed circle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed circle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the circle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the circle's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the circle's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.radius","title":"<code>radius: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's radius.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.resolution","title":"<code>resolution: None | int</code>  <code>property</code>","text":"<p>The circle's resolution.</p> <p>The circle is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The circle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the circle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.getPointCenter","title":"<code>getPointCenter()</code>","text":"<p>Returns the circle's center.</p> <p>Returns:</p> Type Description <code>Point2D</code> <p>The circle's center point as a <code>Point2D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Circle2D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the circle.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The point to check (if it's inside the circle).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the circle (incl. the outline), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D","title":"<code>Rectangle2D(p1, p2, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a rectangle in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of one vertex.</p> required <code>p2</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of another vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed rectangle (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed rectangle (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the rectangle or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.x_min","title":"<code>x_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the bottom-left vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.y_min","title":"<code>y_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the bottom-left vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.x_max","title":"<code>x_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the top-right vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.y_max","title":"<code>y_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the top-right vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The rectangle's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The rectangle's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the rectangle or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Rectangle2D.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the rectangle by a vector.</p> <p>Translates the rectangle by <code>translation</code>. This is mostly useful when the min/max coordinate values would switch if you applied the translation individually to each vertex.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The translation vector. Its coordinates will be added to the rectangle's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D","title":"<code>PointSet2D(points=None, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of points in 2D space.</p> <p>Inits a PointSet2D containing <code>points</code>. If <code>points</code> is <code>None</code>, the pointset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the pointset.</p> <code>None</code> <code>size</code> <code>Number</code> <p>The size of the displayed points.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed points (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the displayed points.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.getPointAt","title":"<code>getPointAt(index)</code>","text":"<p>Returns the point at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired point is placed inside the pointset.</p> required <p>Returns:</p> Type Description <code>Point2D</code> <p>The point at the specified index as a <code>Point2D</code> object. It retains its size and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.add","title":"<code>add(point)</code>","text":"<p>Appends a point to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point2D</code> <p>The <code>Point2D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.createRandom","title":"<code>createRandom(bound, num_points, seed=None, color=(0, 0, 0))</code>","text":"<p>Appends random points to the pointset.</p> <p>Uniformly generates random points inside a region and appends them to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>bound</code> <code>Rectangle2D | Circle2D</code> <p>The area inside of which the random points will be generated.</p> required <code>num_points</code> <code>int</code> <p>How many points to generate.</p> required <code>seed</code> <code>None | int | str</code> <p>An optional seed for the RNG.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the generated points.</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a point from the pointset.</p> <p>Removes a point from the pointset's specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed point is placed inside the pointset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet2D.clear","title":"<code>clear()</code>","text":"<p>Clears the pointset.</p> <p>Clears the pointset, completely removing all points and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D","title":"<code>LineSet2D(points=None, lines=None, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of lines in 2D space.</p> <p>Inits a LineSet2D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in pairs i.e., (0, 1), (2, 3), etc.</p> <p>If <code>points</code> is <code>None</code>, the lineset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the lineset.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.lines","title":"<code>lines: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The point indices indicating lines of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The width of the displayed lines.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The lines' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.getLineAt","title":"<code>getLineAt(index)</code>","text":"<p>Returns the line at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired line is placed inside the lineset.</p> required <p>Returns:</p> Type Description <code>Line2D</code> <p>The line at the specified index as a <code>Line2D</code> object. It retains its width and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.add","title":"<code>add(line)</code>","text":"<p>Appends a line to the lineset.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>Line2D</code> <p>The <code>Line2D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a line from the lineset.</p> <p>Removes a line from the lineset's specified index (does not affect LineSet2D.points in any way).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed line is placed inside the lineset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.LineSet2D.clear","title":"<code>clear()</code>","text":"<p>Clears the lineset.</p> <p>Clears the lineset, completely removing all points, lines and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.Polygon2D","title":"<code>Polygon2D(points=None, lines=None, width=1, color=(0, 0, 0), reorderIfNecessary=False)</code>","text":"<p>             Bases: <code>LineSet2D</code></p> <p>A class used to represent an arbitrary polygon in 2D space.</p> <p>Inits a Polygon2D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in sequence i.e., (0, 1), (1, 2), ..., (n-1, n), (n, 0).</p> <p>If <code>points</code> is <code>None</code>, the polygon will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | PointSet2D | NDArray | List | Tuple</code> <p>The points of the polygon.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>reorderIfNecessary</code> <code>bool</code> <p>If <code>True</code> (and <code>lines</code> is <code>None</code>), the points will be reordered to attempt to make a non - self-intersecting polygon.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Polygon2D.create_from_lineset","title":"<code>create_from_lineset(lineset, width=1, color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a Polygon2D object from a Lineset2D object.</p> <p>Parameters:</p> Name Type Description Default <code>lineset</code> <code>LineSet2D</code> <p>The lineset to be turned into a polygon.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <p>Returns:</p> Type Description <code>Polygon2D</code> <p>The Polygon2D object created from the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D","title":"<code>Label2D(p, text, size=32, font='', bold=False, italic=False, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a text label in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point2D | NDArray2 | List2 | Tuple2</code> <p>The coordinates of the label's anchor (center).</p> required <code>text</code> <code>str</code> <p>The text of the label.</p> required <code>size</code> <code>Number</code> <p>The font size of the label.</p> <code>32</code> <code>font</code> <code>str</code> <p>The name of an installed font.</p> <code>''</code> <code>bold</code> <code>bool</code> <p>Whether the text should be in bold.</p> <code>False</code> <code>italic</code> <code>bool</code> <p>Whether the text should be in italic.</p> <code>False</code> <code>color</code> <code>ColorType</code> <p>The color of the text (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor x-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor y-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's text.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font size.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.font","title":"<code>font: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.bold","title":"<code>bold: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the text should be in bold.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.italic","title":"<code>italic: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the text should be in italic.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label2D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D","title":"<code>Point3D(p, size=1, resolution=20, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a point in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the point.</p> required <code>size</code> <code>Number</code> <p>The size of the displayed point.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed point.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed point (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the x-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the y-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's position on the z-axis.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The point's size.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The point's resolution.</p> <p>The point is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The point's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.distanceSq","title":"<code>distanceSq(p)</code>","text":"<p>Calculates the squared distance from a second point.</p> <p>Calculates the squared Euclidean distance between this and another point. It doesn't take the square root of the result and is, therefore, faster than calling <code>distance</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D</code> <p>The second point, the squared distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>Number</code> <p>The squared distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.Point3D.distance","title":"<code>distance(p)</code>","text":"<p>Calculates the distance from a second point.</p> <p>Calculates the Euclidean distance between this and another point. If you do not need the exact distance, you may want to look into using <code>distanceSq</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D</code> <p>The second point, the distance to which will be calculated.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The distance between this point and <code>p</code>.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D","title":"<code>Line3D(p1, p2, width=1, resolution=20, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a line segment in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the first endpoint.</p> required <code>p2</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the second endpoint.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed line segment.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed line.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed line segment (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.x1","title":"<code>x1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.y1","title":"<code>y1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.z1","title":"<code>z1: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the first endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.x2","title":"<code>x2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.y2","title":"<code>y2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.z2","title":"<code>z2: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the second endpoint.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.width","title":"<code>width: Number</code>  <code>property</code>","text":"<p>The line segment's width.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The line's resolution.</p> <p>The line is drawn as a small cylinder using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The line segment's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.getPointFrom","title":"<code>getPointFrom()</code>","text":"<p>Returns the line segment's first endpoint.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The line segment's first endpoint as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.getPointTo","title":"<code>getPointTo()</code>","text":"<p>Returns the line segment's second endpoint.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The line segment's second endpoint as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Line3D.length","title":"<code>length()</code>","text":"<p>Calculates the length of the line segment.</p> <p>Returns:</p> Type Description <code>float</code> <p>The length of the line segment.</p>"},{"location":"shapes.html#vvrpywork.shapes.Arrow3D","title":"<code>Arrow3D(start, end, width=1, resolution=20, color=(0, 0, 0), cone_to_cylinder_ratio=0.1)</code>","text":"<p>             Bases: <code>Line3D</code></p> <p>A class used to represent an arrow in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the arrow's start.</p> required <code>end</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the arrow's end.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed arrow.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed arrow.</p> <code>20</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed arrow (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>cone_to_cylinder_ratio</code> <code>Number</code> <p>the percentage of the arrow's length that is taken up by the arrow head.</p> <code>0.1</code>"},{"location":"shapes.html#vvrpywork.shapes.Arrow3D.cone_to_cylinder_ratio","title":"<code>cone_to_cylinder_ratio: Number</code>  <code>property</code>","text":"<p>The percentage of the arrow's length that is taken up by the arrow head.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D","title":"<code>Sphere3D(p, radius=1, resolution=20, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a sphere in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the center.</p> required <code>radius</code> <code>Number</code> <p>The sphere's radius.</p> <code>1</code> <code>resolution</code> <code>int</code> <p>The resolution of the displayed sphere.</p> <code>20</code> <code>width</code> <code>Number</code> <p>The width of the displayed sphere (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed sphere (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the sphere or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the sphere's center point.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.radius","title":"<code>radius: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's radius.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.resolution","title":"<code>resolution: int</code>  <code>property</code>","text":"<p>The sphere's resolution.</p> <p>The sphere is drawn using triangles. <code>resolution</code> represents the amount of triangles that will be used.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The sphere's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the sphere or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.getPointCenter","title":"<code>getPointCenter()</code>","text":"<p>Returns the sphere's center.</p> <p>Returns:</p> Type Description <code>Point3D</code> <p>The sphere's center point as a <code>Point3D</code> object.</p>"},{"location":"shapes.html#vvrpywork.shapes.Sphere3D.contains","title":"<code>contains(point)</code>","text":"<p>Determines whether a point is inside the sphere.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point3D</code> <p>The point to check (if it's inside the sphere).</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the point is inside the sphere (incl. the outline), <code>False</code> otherwise.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D","title":"<code>Cuboid3D(p1, p2, width=1, color=(0, 0, 0), filled=False)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a cuboid in 3D space.</p> <p>A class used to represent a cuboid in 3D space. The cuboid has to be axis-aligned. If you need a cuboid that supports rotation, use the more flexible (but less robust) <code>Cuboid3DGeneralized</code>.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of one vertex.</p> required <code>p2</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of another vertex.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed cuboid (if not filled).</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed cuboid (RGB or RGBA).</p> <code>(0, 0, 0)</code> <code>filled</code> <code>bool</code> <p>Whether to fill in the cuboid or draw only its outline.</p> <code>False</code>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.x_min","title":"<code>x_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.y_min","title":"<code>y_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.z_min","title":"<code>z_min: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the bottom-left-back vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.x_max","title":"<code>x_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The x-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.y_max","title":"<code>y_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The y-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.z_max","title":"<code>z_max: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The z-coordinate of the top-right-front vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the cuboid or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3D.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the cuboid by a vector.</p> <p>Translates the cuboid by <code>translation</code>. This is mostly useful when the min/max coordinate values would switch if you applied the translation individually to each vertex.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The translation vector. Its coordinates will be added to the cuboid's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized","title":"<code>Cuboid3DGeneralized(cuboid)</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a cuboid in 3D space.</p> <p>A class used to represent a cuboid in 3D space. The cuboid may be translated and rotated. If you need a cuboid that supports more complex deformations, use a <code>Mesh3D</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>cuboid</code> <code>Cuboid3D</code> <p>The <code>Cuboid3D</code> object to copy.</p> required"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's width (if not filled).</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The cuboid's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized.filled","title":"<code>filled: bool</code>  <code>property</code>","text":"<p>Whether to fill in the cuboid or draw only its outline.</p>"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized.translate","title":"<code>translate(translation)</code>","text":"<p>Translates the cuboid by a vector.</p> <p>Translates the cuboid by <code>translation</code>.</p> <p>Parameters:</p> Name Type Description Default <code>translation</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The translation vector. Its coordinates will be added to the cuboid's coordinates.</p> required"},{"location":"shapes.html#vvrpywork.shapes.Cuboid3DGeneralized.rotate","title":"<code>rotate(angle, axis)</code>","text":"<p>Rotates the cuboid.</p> <p>Rotates the cuboid using a rotation represented as axis-angle.</p> <p>Parameters:</p> Name Type Description Default <code>angle</code> <code>Number</code> <p>The angle to rotate the cuboid.</p> required <code>axis</code> <code>NDArray3 | List3 | Tuple3</code> <p>The axis about which to rotate the cuboid.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D","title":"<code>PointSet3D(points=None, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of points in 3D space.</p> <p>Inits a PointSet3D containing <code>points</code>. If <code>points</code> is <code>None</code>, the pointset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the pointset.</p> <code>None</code> <code>size</code> <code>Number</code> <p>The size of the displayed points.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed points (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The size of the displayed points.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.getPointAt","title":"<code>getPointAt(index)</code>","text":"<p>Returns the point at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired point is placed inside the pointset.</p> required <p>Returns:</p> Type Description <code>Point3D</code> <p>The point at the specified index as a <code>Point3D</code> object. It retains its size and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.add","title":"<code>add(point)</code>","text":"<p>Appends a point to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>Point3D</code> <p>The <code>Point3D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.createRandom","title":"<code>createRandom(bound, num_points, seed=None, color=(0, 0, 0))</code>","text":"<p>Appends random points to the pointset.</p> <p>Uniformly generates random points inside a region and appends them to the pointset.</p> <p>Parameters:</p> Name Type Description Default <code>bound</code> <code>Cuboid3D</code> <p>The area inside of which the random points will be generated.</p> required <code>num_points</code> <code>int</code> <p>How many points to generate.</p> required <code>seed</code> <code>None | int | str</code> <p>An optional seed for the RNG.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the generated points.</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a point from the pointset.</p> <p>Removes a point from the pointset's specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed point is placed inside the pointset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.clear","title":"<code>clear()</code>","text":"<p>Clears the pointset.</p> <p>Clears the pointset, completely removing all points and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.getAABB","title":"<code>getAABB()</code>","text":"<p>Returns the AABB of the pointset.</p> <p>Returns the Axis Aligned Bounding Box of the points in the pointset.</p> <p>Returns:</p> Type Description <code>Cuboid3D</code> <p>The AABB of the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.PointSet3D.remove_duplicated_points","title":"<code>remove_duplicated_points()</code>","text":"<p>Removes points that exist multiple times in the pointset.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D","title":"<code>LineSet3D(points=None, lines=None, width=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a set of lines in 3D space.</p> <p>Inits a LineSet3D containing <code>points</code> connected according to <code>lines</code>.</p> <p>If <code>lines</code> is <code>None</code>, the <code>points</code> will be connected in pairs i.e., (0, 1), (2, 3), etc.</p> <p>If <code>points</code> is <code>None</code>, the lineset will be initialized empty.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>None | NDArray | List | Tuple</code> <p>The points of the lineset.</p> <code>None</code> <code>lines</code> <code>None | NDArray | List | Tuple</code> <p>The indices in <code>points</code> that are connected by a line.</p> <code>None</code> <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.points","title":"<code>points: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The points of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.lines","title":"<code>lines: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The point indices indicating lines of the lineset.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.width","title":"<code>width: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The width of the displayed lines.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.colors","title":"<code>colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The lines' colors in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.getLineAt","title":"<code>getLineAt(index)</code>","text":"<p>Returns the line at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the desired line is placed inside the lineset.</p> required <p>Returns:</p> Type Description <code>Line3D</code> <p>The line at the specified index as a <code>Line3D</code> object. It retains its width and color.</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.add","title":"<code>add(line)</code>","text":"<p>Appends a line to the lineset.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>Line3D</code> <p>The <code>Line3D</code> object to append.</p> required"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.remove","title":"<code>remove(index)</code>","text":"<p>Removes a line from the lineset.</p> <p>Removes a line from the lineset's specified index (does not affect LineSet3D.points in any way).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index at which the to-be-removed line is placed inside the lineset.</p> required"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.clear","title":"<code>clear()</code>","text":"<p>Clears the lineset.</p> <p>Clears the lineset, completely removing all points, lines and information about them (e.g., color).</p>"},{"location":"shapes.html#vvrpywork.shapes.LineSet3D.create_from_mesh","title":"<code>create_from_mesh(mesh, width=1, color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a Lineset3D object from a Mesh3D object.</p> <p>Parameters:</p> Name Type Description Default <code>mesh</code> <code>Mesh3D</code> <p>The mesh to be turned into a lineset.</p> required <code>width</code> <code>Number</code> <p>The width of the displayed lines.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed lines (RGB or RGBA).</p> <code>(0, 0, 0)</code> <p>Returns:</p> Type Description <code>LineSet3D</code> <p>The Lineset3D object extracted from the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D","title":"<code>Mesh3D(path=None, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>ShapeSet</code></p> <p>A class used to represent a triangle mesh in 3D space.</p> <p>Inits a Mesh3D from a specified path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>None | str</code> <p>The path to a file describing a triangle mesh.</p> <code>None</code> <code>color</code> <code>ColorType</code> <p>The color of the displayed mesh (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.vertices","title":"<code>vertices: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The vertices of the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.triangles","title":"<code>triangles: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The triangles (as indices to <code>points</code>) of the mesh.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.vertex_normals","title":"<code>vertex_normals: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The normals of each vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.triangle_normals","title":"<code>triangle_normals: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>The normals of each triangle.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The mesh's color in RGBA format.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.vertex_colors","title":"<code>vertex_colors: NDArray</code>  <code>property</code> <code>writable</code>","text":"<p>A specific color for each vertex.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.remove_duplicated_vertices","title":"<code>remove_duplicated_vertices()</code>","text":"<p>Removes duplicated vertices.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.remove_unreferenced_vertices","title":"<code>remove_unreferenced_vertices()</code>","text":"<p>Removes unreferenced vertices.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.create_bunny","title":"<code>create_bunny(color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a mesh of the Stanford Bunny.</p> <p>Returns:</p> Type Description <code>Mesh3D</code> <p>The <code>Mesh3D</code> object of the Stanford Bunny.</p>"},{"location":"shapes.html#vvrpywork.shapes.Mesh3D.create_armadillo","title":"<code>create_armadillo(color=(0, 0, 0))</code>  <code>staticmethod</code>","text":"<p>Creates a mesh of the Stanford Armadillo.</p> <p>Returns:</p> Type Description <code>Mesh3D</code> <p>The <code>Mesh3D</code> object of the Stanford Armadillo.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D","title":"<code>Label3D(p, text, size=1, color=(0, 0, 0))</code>","text":"<p>             Bases: <code>Shape</code></p> <p>A class used to represent a text label in 3D space.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point3D | NDArray3 | List3 | Tuple3</code> <p>The coordinates of the label's anchor (top-right).</p> required <code>text</code> <code>str</code> <p>The text of the label.</p> required <code>size</code> <code>Number</code> <p>The font size of the label.</p> <code>1</code> <code>color</code> <code>ColorType</code> <p>The color of the text (RGB or RGBA).</p> <code>(0, 0, 0)</code>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.x","title":"<code>x: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor x-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.y","title":"<code>y: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor y-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.z","title":"<code>z: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's anchor z-coordinate.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>The label's text.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.size","title":"<code>size: Number</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font size.</p>"},{"location":"shapes.html#vvrpywork.shapes.Label3D.color","title":"<code>color: ColorType</code>  <code>property</code> <code>writable</code>","text":"<p>The label's font color in RGBA format.</p>"}]}